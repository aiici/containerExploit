package main

import (
	"containerExploit/Plugins"
	"containerExploit/Poc"
	"fmt"
	"os"
	"sync"
)

func printUsage() {
	fmt.Printf(Plugins.Usage, os.Args[0], os.Args[0], os.Args[0])
}

func main() {

	fmt.Println(Plugins.Banner)

	if len(os.Args) == 1 || os.Args[1] == "-h" || os.Args[1] == "--help" {
		printUsage()
		os.Exit(1)
	}

	target := ""
	targetFile := ""
	scanVulnerability := ""
	threadCount := 10

	for i := 1; i < len(os.Args); i += 2 {
		if i+1 >= len(os.Args) {
			printUsage()
			os.Exit(1)
		}

		flag := os.Args[i]
		value := os.Args[i+1]
		switch flag {
		case "-t":
			target = value
		case "-f":
			targetFile = value
		case "-v":
			scanVulnerability = value
		case "-c":
			threadCount = Plugins.ParseThreadCount(value)
		default:
			fmt.Printf("[-] Unknown option: %s\n", flag)
			printUsage() // 显示使用帮助信息
			os.Exit(1)
		}
	}

	if scanVulnerability == "" || !Plugins.IsValidVulnerability(scanVulnerability) {
		fmt.Println("[-] 请选择有效的漏洞类型: [apiserver | kubelet | etcd | dashboard | cluster | remote | registry]")
		os.Exit(1)
	}

	fmt.Printf("[+] 开始检查 %s!\n", scanVulnerability)
	fmt.Printf("[+] 配置最大线程数为 %d!\n", threadCount)
	var targetList []string
	if targetFile != "" {
		targetList = Poc.ReadTargetFile(targetFile)
	} else if target != "" {
		targetList = []string{target}
	}

	if len(targetList) == 0 {
		fmt.Println("[-] 没有要扫描的目标!")
		os.Exit(1)
	}

	fmt.Printf("[+] 开始扫描! 共 %d 个目标!\n", len(targetList))

	var wg sync.WaitGroup
	sem := make(chan struct{}, threadCount) // 控制并发数

	for _, t := range targetList {
		wg.Add(1)
		sem <- struct{}{} // 确保不超过线程数限制
		go func(target string) {
			defer wg.Done()
			Plugins.VerifyVulnerability(target, scanVulnerability)
			<-sem // 完成时释放位置
		}(t)
	}

	wg.Wait()
	fmt.Println("[+] 扫描完成!")
}
